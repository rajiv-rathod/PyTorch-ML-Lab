{"file_contents":{"app.py":{"content":"import os\nimport logging\nfrom flask import Flask, render_template, request, redirect, url_for, flash, jsonify, session\nfrom flask_sqlalchemy import SQLAlchemy\nfrom sqlalchemy.orm import DeclarativeBase\nfrom werkzeug.middleware.proxy_fix import ProxyFix\nimport pandas as pd\nimport numpy as np\nimport joblib\nimport json\nimport tempfile\n\n# Configure logging\nlogging.basicConfig(level=logging.DEBUG)\nlogger = logging.getLogger(__name__)\n\nclass Base(DeclarativeBase):\n    pass\n\ndb = SQLAlchemy(model_class=Base)\n# create the app\napp = Flask(__name__)\napp.secret_key = os.environ.get(\"SESSION_SECRET\", \"default_ml_project_secret\")\napp.wsgi_app = ProxyFix(app.wsgi_app, x_proto=1, x_host=1)  # needed for url_for to generate with https\n\n# configure the database using PostgreSQL\napp.config[\"SQLALCHEMY_DATABASE_URI\"] = os.environ.get(\"DATABASE_URL\")\napp.config[\"SQLALCHEMY_ENGINE_OPTIONS\"] = {\n    \"pool_recycle\": 300,\n    \"pool_pre_ping\": True,\n}\napp.config[\"UPLOAD_FOLDER\"] = \"uploads\"\n\n# Initialize the app with the extension\ndb.init_app(app)\n\n# Import routes after app is initialized to avoid circular imports\nfrom ml_models.deep_learning import DeepLearningModel\nfrom ml_models.traditional_ml import TraditionalMLModel\nfrom utils.data_preprocessing import DataPreprocessor\nfrom utils.evaluation import ModelEvaluator\nfrom utils.visualization import Visualizer\n\n# Ensure uploads folder exists\nos.makedirs(app.config['UPLOAD_FOLDER'], exist_ok=True)\n\n@app.route('/')\ndef index():\n    return render_template('index.html')\n\n@app.route('/about')\ndef about():\n    return render_template('about.html')\n\n@app.route('/upload', methods=['POST'])\ndef upload_file():\n    if 'file' not in request.files:\n        flash('No file part')\n        return redirect(url_for('index'))\n    \n    file = request.files['file']\n    if file.filename == '':\n        flash('No selected file')\n        return redirect(url_for('index'))\n    \n    if file and file.filename and file.filename.endswith('.csv'):\n        # Save to a temp file\n        with tempfile.NamedTemporaryFile(delete=False, suffix='.csv') as temp_file:\n            file.save(temp_file.name)\n            session['dataset_path'] = temp_file.name\n            \n        try:\n            # Preview the dataset\n            df = pd.read_csv(session['dataset_path'])\n            preview = df.head(5).to_html(classes='table table-striped table-sm')\n            columns = df.columns.tolist()\n            \n            # Store in session\n            session['dataset_columns'] = columns\n            \n            return render_template('index.html', \n                                   preview=preview, \n                                   columns=columns,\n                                   dataset_loaded=True)\n        except Exception as e:\n            flash(f'Error processing file: {str(e)}')\n            return redirect(url_for('index'))\n    \n    flash('Invalid file type. Please upload a CSV file.')\n    return redirect(url_for('index'))\n\n@app.route('/train', methods=['POST'])\ndef train_model():\n    if 'dataset_path' not in session:\n        flash('Please upload a dataset first')\n        return redirect(url_for('index'))\n    \n    try:\n        # Get form data\n        target_column = request.form.get('target_column')\n        model_type = request.form.get('model_type')\n        feature_columns = request.form.getlist('feature_columns')\n        test_size = float(request.form.get('test_size', 0.2))\n        \n        if not target_column or not model_type or not feature_columns:\n            flash('Please select target column, features, and model type')\n            return redirect(url_for('index'))\n        \n        # Load and preprocess data\n        preprocessor = DataPreprocessor()\n        df = pd.read_csv(session['dataset_path'])\n        \n        X_train, X_test, y_train, y_test = preprocessor.preprocess_data(\n            df, feature_columns, target_column, test_size=test_size\n        )\n        \n        # Train model based on selection\n        if model_type == 'deep_learning':\n            model = DeepLearningModel(\n                input_dim=len(feature_columns),\n                hidden_dim=int(request.form.get('hidden_dim', 64)),\n                output_dim=1 if len(np.unique(y_train)) == 2 else len(np.unique(y_train)),\n                learning_rate=float(request.form.get('learning_rate', 0.001)),\n                epochs=int(request.form.get('epochs', 100))\n            )\n            is_classification = len(np.unique(y_train)) < 10  # Heuristic\n            model_info = model.train(X_train, y_train, X_test, y_test, is_classification=is_classification)\n        else:\n            model = TraditionalMLModel(\n                model_name=request.form.get('traditional_model', 'random_forest'),\n                params={}\n            )\n            is_classification = len(np.unique(y_train)) < 10  # Heuristic\n            model_info = model.train(X_train, y_train, X_test, y_test, is_classification=is_classification)\n        \n        # Evaluate model\n        evaluator = ModelEvaluator()\n        metrics = evaluator.evaluate_model(model, X_test, y_test, is_classification=is_classification)\n        \n        # Create visualizations\n        visualizer = Visualizer()\n        plot_paths = visualizer.create_visualizations(model, X_test, y_test, is_classification=is_classification)\n        \n        # Save model for later prediction\n        model_path = os.path.join(app.config['UPLOAD_FOLDER'], 'model.pkl')\n        feature_path = os.path.join(app.config['UPLOAD_FOLDER'], 'features.json')\n        \n        joblib.dump(model, model_path)\n        with open(feature_path, 'w') as f:\n            json.dump({\n                'features': feature_columns,\n                'target': target_column,\n                'is_classification': is_classification\n            }, f)\n        \n        # Store training results in session\n        session['training_results'] = {\n            'metrics': metrics,\n            'plots': plot_paths,\n            'model_type': model_type,\n            'feature_columns': feature_columns,\n            'target_column': target_column,\n            'is_classification': is_classification\n        }\n        \n        return render_template('results.html', \n                              metrics=metrics, \n                              plots=plot_paths,\n                              model_type=model_type,\n                              training_info=model_info)\n    \n    except Exception as e:\n        logger.exception(\"Error during model training\")\n        flash(f'Error training model: {str(e)}')\n        return redirect(url_for('index'))\n\n@app.route('/predict')\ndef predict_page():\n    if 'training_results' not in session:\n        flash('Please train a model first')\n        return redirect(url_for('index'))\n    \n    feature_columns = session['training_results']['feature_columns']\n    return render_template('predict.html', features=feature_columns)\n\n@app.route('/make_prediction', methods=['POST'])\ndef make_prediction():\n    if 'training_results' not in session:\n        flash('Please train a model first')\n        return redirect(url_for('index'))\n    \n    try:\n        # Load saved model and features\n        model_path = os.path.join(app.config['UPLOAD_FOLDER'], 'model.pkl')\n        feature_path = os.path.join(app.config['UPLOAD_FOLDER'], 'features.json')\n        \n        model = joblib.load(model_path)\n        with open(feature_path, 'r') as f:\n            feature_info = json.load(f)\n        \n        # Get input values from form\n        input_data = {}\n        for feature in feature_info['features']:\n            input_data[feature] = float(request.form.get(feature, 0))\n        \n        # Create input DataFrame\n        input_df = pd.DataFrame([input_data])\n        \n        # Make prediction\n        result = model.predict(input_df)\n        \n        if feature_info['is_classification']:\n            prediction = int(result[0])\n            return render_template('predict.html', \n                                 features=feature_info['features'],\n                                 prediction=prediction,\n                                 prediction_made=True)\n        else:\n            prediction = float(result[0])\n            return render_template('predict.html', \n                                 features=feature_info['features'],\n                                 prediction=prediction,\n                                 prediction_made=True)\n    \n    except Exception as e:\n        logger.exception(\"Error during prediction\")\n        flash(f'Error making prediction: {str(e)}')\n        return redirect(url_for('predict_page'))\n\n# Admin routes\n@app.route('/admin')\ndef admin_dashboard():\n    users = models.User.query.all()\n    saved_models = models.SavedModel.query.all()\n    datasets = models.Dataset.query.all()\n    return render_template('admin.html', users=users, models=saved_models, datasets=datasets)\n\n@app.route('/admin/add_user', methods=['POST'])\ndef add_user():\n    try:\n        username = request.form.get('username')\n        email = request.form.get('email')\n        password = request.form.get('password')\n        \n        # Check if user already exists\n        existing_user = models.User.query.filter_by(username=username).first()\n        if existing_user:\n            flash('Username already exists', 'danger')\n            return redirect(url_for('admin_dashboard'))\n        \n        # Create new user\n        user = models.User(username=username, email=email)\n        user.set_password(password)\n        \n        db.session.add(user)\n        db.session.commit()\n        \n        flash('User added successfully', 'success')\n    except Exception as e:\n        db.session.rollback()\n        logger.exception(\"Error adding user\")\n        flash(f'Error adding user: {str(e)}', 'danger')\n    \n    return redirect(url_for('admin_dashboard'))\n\n@app.route('/admin/edit_user/<int:user_id>', methods=['GET', 'POST'])\ndef edit_user(user_id):\n    user = models.User.query.get_or_404(user_id)\n    \n    if request.method == 'POST':\n        try:\n            user.username = request.form.get('username')\n            user.email = request.form.get('email')\n            \n            # Only update password if provided\n            password = request.form.get('password')\n            if password:\n                user.set_password(password)\n            \n            db.session.commit()\n            flash('User updated successfully', 'success')\n            return redirect(url_for('admin_dashboard'))\n        except Exception as e:\n            db.session.rollback()\n            logger.exception(\"Error updating user\")\n            flash(f'Error updating user: {str(e)}', 'danger')\n    \n    return render_template('edit_user.html', user=user)\n\n@app.route('/admin/delete_user/<int:user_id>')\ndef delete_user(user_id):\n    try:\n        user = models.User.query.get_or_404(user_id)\n        db.session.delete(user)\n        db.session.commit()\n        flash('User deleted successfully', 'success')\n    except Exception as e:\n        db.session.rollback()\n        logger.exception(\"Error deleting user\")\n        flash(f'Error deleting user: {str(e)}', 'danger')\n    \n    return redirect(url_for('admin_dashboard'))\n\n@app.route('/admin/view_model/<int:model_id>')\ndef view_model(model_id):\n    model = models.SavedModel.query.get_or_404(model_id)\n    return render_template('view_model.html', model=model)\n\n@app.route('/admin/delete_model/<int:model_id>')\ndef delete_model(model_id):\n    try:\n        model = models.SavedModel.query.get_or_404(model_id)\n        \n        # Delete the model file if it exists\n        if os.path.exists(model.file_path):\n            os.remove(model.file_path)\n        \n        db.session.delete(model)\n        db.session.commit()\n        flash('Model deleted successfully', 'success')\n    except Exception as e:\n        db.session.rollback()\n        logger.exception(\"Error deleting model\")\n        flash(f'Error deleting model: {str(e)}', 'danger')\n    \n    return redirect(url_for('admin_dashboard'))\n\n@app.route('/admin/view_dataset/<int:dataset_id>')\ndef view_dataset(dataset_id):\n    dataset = models.Dataset.query.get_or_404(dataset_id)\n    \n    # Read a preview of the dataset if the file exists\n    preview = None\n    if os.path.exists(dataset.file_path):\n        try:\n            df = pd.read_csv(dataset.file_path)\n            preview = df.head(10).to_html(classes='table table-dark table-striped')\n        except Exception as e:\n            logger.exception(\"Error reading dataset\")\n            flash(f'Error reading dataset: {str(e)}', 'warning')\n    \n    return render_template('view_dataset.html', dataset=dataset, preview=preview)\n\n@app.route('/admin/delete_dataset/<int:dataset_id>')\ndef delete_dataset(dataset_id):\n    try:\n        dataset = models.Dataset.query.get_or_404(dataset_id)\n        \n        # Delete the dataset file if it exists\n        if os.path.exists(dataset.file_path):\n            os.remove(dataset.file_path)\n        \n        db.session.delete(dataset)\n        db.session.commit()\n        flash('Dataset deleted successfully', 'success')\n    except Exception as e:\n        db.session.rollback()\n        logger.exception(\"Error deleting dataset\")\n        flash(f'Error deleting dataset: {str(e)}', 'danger')\n    \n    return redirect(url_for('admin_dashboard'))\n\nwith app.app_context():\n    # Import the models here so their tables will be created\n    import models  # noqa: F401\n    db.create_all()\n","size_bytes":13428},"main.py":{"content":"from app import app\n\nif __name__ == \"__main__\":\n    app.run(host=\"0.0.0.0\", port=5000, debug=True)\n","size_bytes":99},"models.py":{"content":"from app import db\nfrom flask_login import UserMixin\nfrom datetime import datetime\nfrom werkzeug.security import generate_password_hash, check_password_hash\n\nclass User(UserMixin, db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    username = db.Column(db.String(64), unique=True, nullable=False)\n    email = db.Column(db.String(120), unique=True, nullable=False)\n    password_hash = db.Column(db.String(256))\n    models = db.relationship('SavedModel', backref='user', lazy='dynamic')\n    \n    def set_password(self, password):\n        self.password_hash = generate_password_hash(password)\n        \n    def check_password(self, password):\n        return check_password_hash(self.password_hash, password)\n\nclass SavedModel(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    name = db.Column(db.String(100), nullable=False)\n    model_type = db.Column(db.String(50), nullable=False)\n    description = db.Column(db.Text)\n    file_path = db.Column(db.String(200), nullable=False)\n    metrics = db.Column(db.JSON)\n    created_at = db.Column(db.DateTime, default=datetime.utcnow)\n    user_id = db.Column(db.Integer, db.ForeignKey('user.id'))\n    \n    @property\n    def accuracy(self):\n        \"\"\"Return the accuracy from the metrics if it exists\"\"\"\n        if self.metrics and 'accuracy' in self.metrics:\n            return self.metrics['accuracy']\n        return None\n    \n    @property\n    def formatted_date(self):\n        \"\"\"Return a formatted date string\"\"\"\n        return self.created_at.strftime('%B %d, %Y at %H:%M')\n\nclass Dataset(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    name = db.Column(db.String(100), nullable=False)\n    description = db.Column(db.Text)\n    file_path = db.Column(db.String(200), nullable=False)\n    row_count = db.Column(db.Integer)\n    column_count = db.Column(db.Integer)\n    created_at = db.Column(db.DateTime, default=datetime.utcnow)\n    user_id = db.Column(db.Integer, db.ForeignKey('user.id'))\n    user = db.relationship('User', backref='datasets')\n\nclass TrainingJob(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    dataset_id = db.Column(db.Integer, db.ForeignKey('dataset.id'))\n    model_id = db.Column(db.Integer, db.ForeignKey('saved_model.id'))\n    status = db.Column(db.String(20), default='pending')\n    started_at = db.Column(db.DateTime, default=datetime.utcnow)\n    completed_at = db.Column(db.DateTime)\n    training_params = db.Column(db.JSON)\n    results = db.Column(db.JSON)\n    \n    dataset = db.relationship('Dataset')\n    model = db.relationship('SavedModel')\n","size_bytes":2570},"pyproject.toml":{"content":"[project]\nname = \"repl-nix-workspace\"\nversion = \"0.1.0\"\ndescription = \"Add your description here\"\nrequires-python = \">=3.11\"\ndependencies = [\n    \"email-validator>=2.2.0\",\n    \"flask-login>=0.6.3\",\n    \"flask>=3.1.0\",\n    \"flask-sqlalchemy>=3.1.1\",\n    \"gunicorn>=23.0.0\",\n    \"joblib>=1.4.2\",\n    \"numpy>=2.2.4\",\n    \"pandas>=2.2.3\",\n    \"psycopg2-binary>=2.9.10\",\n    \"sqlalchemy>=2.0.40\",\n    \"werkzeug>=3.1.3\",\n    \"scikit-learn>=1.6.1\",\n    \"torch>=2.6.0\",\n    \"matplotlib>=3.10.1\",\n    \"seaborn>=0.13.2\",\n]\n\n[[tool.uv.index]]\nexplicit = true\nname = \"pytorch-cpu\"\nurl = \"https://download.pytorch.org/whl/cpu\"\n\n[tool.uv.sources]\nAA-module = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nABlooper = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nAnalysisG = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nAutoRAG = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nBERTeam = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nBxTorch = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nByaldi = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nCALM-Pytorch = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nCOPEX-high-rate-compression-quality-metrics = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nCityLearn = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nCoCa-pytorch = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nCoLT5-attention = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nComfyUI-EasyNodes = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nCrawl4AI = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nDALL-E = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nDI-toolkit = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nDatasetRising = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nDeepCache = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nDeepMatter = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nDraugr = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nESRNN = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nEn-transformer = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nExpoSeq = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nFLAML = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nFSRS-Optimizer = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nGANDLF = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nGQLAlchemy = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nGhostScan = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nGraKeL = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nHEBO = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nIOPaint = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nISLP = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nInvokeAI = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nJAEN = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nKapoorLabs-Lightning = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nLightAutoML = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nLingerGRN = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nMMEdu = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nMRzeroCore = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nModeva = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nNeuralFoil = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nNiMARE = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nNinjaTools = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nOpenHosta = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nOpenNMT-py = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nPOT = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nPVNet = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nPaLM-rlhf-pytorch = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nPepperPepper = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nPiML = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nPoutyne = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nQNCP = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nRAGatouille = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nRareGO = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nRealtimeSTT = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nRelevanceAI-Workflows-Core = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nResemblyzer = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nScandEval = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nSimba-UW-tf-dev = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nSwissArmyTransformer = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nTPOT = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nTTS = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nTorchCRF = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nTotalSegmentator = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nUtilsRL = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nWhisperSpeech = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nXAISuite = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\na-unet = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\na5dev = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\naccelerate = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\naccelerated-scan = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\naccern-xyme = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nachatbot = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nacids-rave = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nactorch = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nacvl-utils = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nadabelief-pytorch = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nadam-atan2-pytorch = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nadan-pytorch = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nadapters = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nadmin-torch = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nadtoolbox = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nadversarial-robustness-toolbox = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\naeiou = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\naeon = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nafricanwhisper = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nag-llama-api = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nagentdojo = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nagilerl = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nai-edge-torch-nightly = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nai-parrot = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nai-python = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nai-transform = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nai2-olmo = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nai2-olmo-core = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nai2-tango = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\naicmder = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\naider-chat = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\naider-chat-x = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\naif360 = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\naihwkit = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\naimodelshare = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nairllm = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nairtestProject = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nairunner = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\naisak = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\naislib = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\naisquared = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\naistore = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\naithree = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nakasha-terminal = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nalibi = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nalibi-detect = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nalignn = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nall-clip = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nallennlp = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nallennlp-models = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nallennlp-pvt-nightly = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nallophant = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nallosaurus = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\naloy = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nalpaca-eval = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nalphafold2-pytorch = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nalphafold3-pytorch = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nalphamed-federated = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nalphawave = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\namazon-braket-pennylane-plugin = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\namazon-photos = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nanemoi-graphs = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nanemoi-models = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nanomalib = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\napache-beam = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\napache-tvm = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\naperturedb = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\naphrodite-engine = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\naqlm = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\narcAGI2024 = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\narchisound = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nargbind = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\narize = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\narm-pytorch-utilities = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\narray-api-compat = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\narus = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nassert-llm-tools = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nasteroid = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nasteroid-filterbanks = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nastra-llm = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nastrovision = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\natomate2 = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nattacut = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\naudio-diffusion-pytorch = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\naudio-encoders-pytorch = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\naudio-separator = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\naudiocraft = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\naudiolm-pytorch = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nauralis = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nauraloss = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nauto-gptq = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nautoawq = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nautoawq-kernels = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\n\"autogluon.multimodal\" = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\n\"autogluon.tabular\" = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\n\"autogluon.timeseries\" = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nautotrain-advanced = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\navdeepfake1m = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\naws-fortuna = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nax-platform = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nazureml-automl-dnn-vision = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nazureml-contrib-automl-dnn-forecasting = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nazureml-evaluate-mlflow = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nazureml-metrics = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nazureml-train-automl = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nb2bTools = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nbackpack-for-pytorch = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nbalrog-nle = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nbatch-face = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nbatchalign = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nbatchgeneratorsv2 = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nbatchtensor = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nbbrl = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nbenchpots = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nbent = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nbert-score = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nbertopic = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nbertviz = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nbestOf = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nbetty-ml = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nbig-sleep = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nbigdl-core-cpp = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nbigdl-core-npu = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nbigdl-llm = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nbigdl-nano = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\n\"bioimageio.core\" = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nbitfount = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nbitsandbytes = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nbittensor = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nbittensor-cli = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nblackboxopt = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nblanc = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nblindai = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nbm25-pt = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nboltz = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nbotorch = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nboxmot = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nbrainchain = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nbraindecode = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nbrevitas = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nbriton = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nbrowsergym-visualwebarena = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nbuzz-captions = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nbyotrack = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nbyzerllm = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nc4v-py = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ncalflops = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ncame-pytorch = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ncamel-ai = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ncamel-tools = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ncannai = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ncaptum = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ncarte-ai = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ncarvekit-colab = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ncatalyst = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ncausalml = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ncausalnex = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ncausy = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ncbrkit = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ncca-zoo = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ncdp-backend = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ncellacdc = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ncellfinder = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ncellpose = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ncellxgene-census = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nchattts = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nchemprop = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nchgnet = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nchitra = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ncircuitsvis = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ncjm-yolox-pytorch = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nclarinpl-embeddings = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nclass-resolver = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nclassifier-free-guidance-pytorch = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nclassiq = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nclassy-core = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nclean-fid = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ncleanvision = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nclip-anytorch = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nclip-benchmark = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nclip-by-openai = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nclip-interrogator = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nclip-retrieval = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ncltk = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nclu = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nclusterops = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ncnocr = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ncnstd = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ncoba = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ncofi = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ncolbert-ai = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ncolpali-engine = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ncompel = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ncomposabl-ray = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ncomposabl-ray-dev = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ncomposabl-train = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ncomposabl-train-dev = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ncomposer = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ncompressai = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ncompressed-tensors = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ncompressed-tensors-nightly = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nconcrete-python = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nconfit = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nconformer = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ncontextualSpellCheck = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ncontinual-inference = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ncontrolnet-aux = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nconvokit = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ncoola = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ncoqui-tts = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ncoqui-tts-trainer = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ncraft-text-detector = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ncreme = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ncrocodile = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ncrowd-kit = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ncryoSPHERE = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ncsle-common = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ncsle-system-identification = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nctgan = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ncurated-transformers = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ncut-cross-entropy = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ncvat-sdk = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ncybertask = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nd3rlpy = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ndalle-pytorch = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ndalle2-pytorch = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ndanila-lib = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ndanling = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ndarts = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ndarwin-py = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ndata-gradients = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ndatachain = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ndataclass-array = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ndataeval = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ndatarobot-drum = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ndatarobotx = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ndatasets = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ndatumaro = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ndctorch = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ndeep-utils = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ndeepchecks = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ndeepchem = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ndeepctr-torch = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ndeepecho = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ndeepepochs = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ndeepforest = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ndeeplabcut = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ndeepmd-kit = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ndeepmultilingualpunctuation = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ndeepparse = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ndeeprobust = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ndeepsparse = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ndeepsparse-nightly = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ndeepspeed = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ndenoising-diffusion-pytorch = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ndescript-audio-codec = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ndescript-audiotools = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ndetecto = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ndetoxify = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ndgenerate = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ndghs-imgutils = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ndgl = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ndialogy = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ndice-ml = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ndiffgram = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ndiffq = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ndiffusers = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ndistilabel = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ndistrifuser = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ndnikit = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ndocarray = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ndoclayout-yolo = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ndocling-ibm-models = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ndocquery = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ndomino-code-assist = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ndreamsim = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ndropblock = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ndruida = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ndvclive = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ne2-tts-pytorch = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ne2cnn = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ne3nn = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\neasyocr = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nebtorch = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\necallisto-ng = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nedsnlp = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\neffdet = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\neinx = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\neir-dl = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\neis1600 = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\neland = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nema-pytorch = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nembedchain = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nenformer-pytorch = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nentmax = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nesm = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nespaloma-charge = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nespnet = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\netils = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\netna = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nevadb = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nevalscope = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nevaluate = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nexllamav2 = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nextractable = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nface-alignment = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nfacenet-pytorch = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nfacexlib = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nfair-esm = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nfairseq = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nfairseq2 = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nfairseq2n = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nfaker-file = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nfarm = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nfast-bert = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nfast-pytorch-kmeans = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nfastai = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nfastcore = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nfastestimator-nightly = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nfasttreeshap = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nfedml = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nfelupe = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nfemr = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nfer = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nfft-conv-pytorch = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nfickling = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nfireworks-ai = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nflair = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nflashrag-dev = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nflax = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nflexgen = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nflgo = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nflopth = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nflowcept = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nflytekitplugins-kfpytorch = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nflytekitplugins-onnxpytorch = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nfmbench = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nfocal-frequency-loss = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nfoldedtensor = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nfractal-tasks-core = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nfreegenius = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nfreqtrade = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nfschat = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nfunasr = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nfunctorch = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nfunlbm = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nfunsor = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ngalore-torch = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ngarak = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ngarf = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ngateloop-transformer = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ngeffnet = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ngenutility = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ngfpgan = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ngigagan-pytorch = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ngin-config = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nglasflow = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ngliner = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ngluonts = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ngmft = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ngoogle-cloud-aiplatform = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ngpforecaster = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ngpt3discord = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ngpytorch = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ngrad-cam = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ngraph-weather = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ngraphistry = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ngravitorch = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ngretel-synthetics = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ngsplat = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nguardrails-ai = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nguidance = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ngymnasium = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nhanlp = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nhappytransformer = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nhbutils = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nheavyball = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nhezar = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nhf-deepali = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nhf-doc-builder = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nhigher = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nhjxdl = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nhkkang-utils = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nhordelib = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nhpsv2 = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nhuggingface-hub = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nhummingbird-ml = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nhvae-backbone = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nhya = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nhypothesis-torch = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nibm-metrics-plugin = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nibm-watson-machine-learning = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nibm-watsonx-ai = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nicetk = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nicevision = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\niden = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nidvpackage = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\niglovikov-helper-functions = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nimagededup = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nimagen-pytorch = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nimaginAIry = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nimg2vec-pytorch = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nincendio = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ninference = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ninference-gpu = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ninfinity-emb = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ninfo-nce-pytorch = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ninfoapps-mlops-sdk = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ninstructlab = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ninstructlab-dolomite = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ninstructlab-eval = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ninstructlab-sdg = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ninstructlab-training = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ninvisible-watermark = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\niobm = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nipex-llm = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\niree-turbine = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nirisml = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nirisml-tasks-azure-openai = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nirisml-tasks-torchvision = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nirisml-tasks-training = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nitem-matching = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nivadomed = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\njaqpotpy = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\njina = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\njudo = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\njunky = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nk-diffusion = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nk1lib = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nk2 = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nkappadata = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nkappamodules = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nkarbonn = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nkats = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nkbnf = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nkedro-datasets = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nkeybert = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nkeytotext = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nkhoj = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nkiui = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nkonfuzio-sdk = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nkornia = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nkornia-moons = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nkraken = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nkwarray = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nkwimage = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nlabml-nn = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nlagent = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nlaion-clap = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nlale = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nlama-cleaner = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nlancedb = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nlangcheck = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nlangkit = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nlangroid = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nlangtest = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nlayoutparser = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nldp = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nleafmap = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nleap-ie = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nleibniz = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nleptonai = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nletmedoit = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nlhotse = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nlib310 = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nlibpecos = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nlibrec-auto = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nlibretranslate = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nliger-kernel = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nliger-kernel-nightly = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nlightly = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nlightning = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nlightning-bolts = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nlightning-fabric = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nlightning-habana = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nlightning-lite = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nlightrag = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nlightweight-gan = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nlightwood = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nlinear-attention-transformer = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nlinear-operator = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nlinformer = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nlinformer-pytorch = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nliom-toolkit = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nlion-pytorch = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nlit-nlp = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nlitdata = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nlitelama = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nlitgpt = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nllama-index-embeddings-adapter = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nllama-index-embeddings-clip = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nllama-index-embeddings-instructor = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nllama-index-llms-huggingface = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nllama-index-postprocessor-colbert-rerank = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nllm-blender = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nllm-foundry = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nllm-guard = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nllm-rs = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nllm2vec = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nllmcompressor = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nllmlingua = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nllmvm-cli = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nlm-eval = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nlmdeploy = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nlmms-eval = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nlocal-attention = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nlovely-tensors = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nlpips = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nlycoris-lora = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nmace-torch = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nmagic-pdf = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nmagicsoup = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nmagvit2-pytorch = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nmaite = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nmanga-ocr = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nmanifest-ml = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nmanipulation = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nmarker-pdf = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nmatgl = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nmed-imagetools = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nmedaka = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nmedcat = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nmedmnist = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nmegablocks = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nmegatron-energon = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nmemos = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nmeshgpt-pytorch = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nmetatensor-torch = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nmflux = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nmia-vgg = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nmiditok = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nminari = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nminicons = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nml2rt = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nmlagents = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nmlbench-core = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nmlcroissant = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nmlpfile = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nmlx = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nmlx-whisper = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nmmaction2 = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nmmengine = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nmmengine-lite = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nmmocr = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nmmpose = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nmmsegmentation = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nmodeci-mdf = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nmodel2vec = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nmodelscope = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nmodelspec = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nmonai = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nmonai-weekly = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nmonotonic-alignment-search = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nmonty = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nmosaicml = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nmosaicml-streaming = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nmoshi = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nmteb = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nmtmtrain = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nmulti-quantization = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nmyhand = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nnGPT-pytorch = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nnaeural-core = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nnapari = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nnapatrackmater = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nnara-wpe = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nnatten = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nnbeats-pytorch = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nnebulae = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nnemo-toolkit = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nneptune = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nneptune-client = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nnerfacc = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nnerfstudio = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nnessai = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nnetcal = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nneural-rag = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nneuralforecast = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nneuralnets = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nneuralprophet = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nneuspell = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nnevergrad = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nnexfort = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nnimblephysics = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nnirtorch = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nnkululeko = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nnlp = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nnlptooltest = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nnnAudio = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nnnodely = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nnnsight = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nnnunetv2 = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nnoisereduce = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nnonebot-plugin-nailongremove = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nnowcasting-dataloader = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nnowcasting-forecast = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nnshtrainer = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nnuwa-pytorch = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nnvflare = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nnvidia-modelopt = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nocf-datapipes = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nocnn = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nogb = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nohmeow-blurr = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nolive-ai = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nomlt = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nommlx = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nonediff = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nonediffx = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nonnx2pytorch = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nonnx2torch = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nopacus = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nopen-clip-torch = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nopen-flamingo = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nopen-interpreter = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nopenbb-terminal-nightly = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nopenmim = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nopenparse = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nopenunmix = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nopenvino-dev = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nopenvino-tokenizers = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nopenvino-xai = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nopenwakeword = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nopt-einsum-fx = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\noptimum = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\noptimum-habana = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\noptimum-intel = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\noptimum-neuron = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\noptimum-quanto = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\noptree = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\noptuna = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\noptuna-dashboard = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\noptuna-integration = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\noracle-ads = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\norbit-ml = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\notx = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\noutetts = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\noutlines = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\noutlines-core = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\npaddlenlp = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\npai-easycv = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\npandasai = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\npanns-inference = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\npatchwork-cli = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\npeft = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\npegasuspy = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\npelutils = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\npenn = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nperforatedai-freemium = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nperformer-pytorch = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\npetastorm = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\npfio = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\npgmpy = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nphenolrs = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nphobos = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\npi-zero-pytorch = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\npinecone-text = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\npiq = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\npix2tex = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\npix2text = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\npnnx = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\npolicyengine-us-data = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\npolyfuzz = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\npomegranate = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\npositional-encodings = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nprefigure = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nproduct-key-memory = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nptflops = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nptwt = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\npulser-core = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\npunctuators = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\npy2ls = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\npyabsa = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\n\"pyannote.audio\" = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\npyawd = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\npyclarity = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\npycox = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\npyfemtet = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\npyg-nightly = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\npygrinder = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\npyhealth = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\npyhf = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\npyiqa = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\npykeen = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\npykeops = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\npylance = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\npylineaGT = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\npymanopt = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\npymde = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\npypots = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\npyqlib = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\npyqtorch = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\npyro-ppl = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\npysentimiento = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\npyserini = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\npysr = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\npythainlp = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\npython-doctr = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\npytorch-fid = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\npytorch-forecasting = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\npytorch-ignite = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\npytorch-kinematics = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\npytorch-lightning = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\npytorch-lightning-bolts = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\npytorch-metric-learning = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\npytorch-model-summary = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\npytorch-msssim = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\npytorch-pfn-extras = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\npytorch-pretrained-bert = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\npytorch-ranger = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\npytorch-seed = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\npytorch-tabnet = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\npytorch-tabular = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\npytorch-toolbelt = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\npytorch-transformers = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\npytorch-transformers-pvt-nightly = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\npytorch-triton-rocm = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\npytorch-warmup = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\npytorch-wavelets = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\npytorch_optimizer = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\npytorch_revgrad = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\npytorchcv = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\npytorchltr2 = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\npyvene = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\npyvespa = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nqianfan = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nqibo = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nqiskit-machine-learning = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nqtorch = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nquanto = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nquick-anomaly-detector = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nrastervision = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nrastervision-pytorch-backend = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nrastervision-pytorch-learner = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nray-lightning = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nrclip = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nrealesrgan = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nrecbole = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nrecommenders = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nredcat = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nreformer-pytorch = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nregex-sampler = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nreplay-rec = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nrerankers = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nresearch-framework = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nresemble-enhance = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nresnest = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nrf-clip = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nrf-groundingdino = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nrfconv = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nrich-logger = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nring-attention-pytorch = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nrltrade-test = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nrotary-embedding-torch = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nrsp-ml = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nrust-circuit = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ns2fft = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ns3prl = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ns3torchconnector = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nsaferx = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nsafetensors = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nsagemaker-huggingface-inference-toolkit = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nsagemaker-ssh-helper = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nsalesforce-lavis = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nsalesforce-merlion = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nsamv2 = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nscib = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nscib-metrics = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nscvi-tools = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nsdmetrics = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nsecretflow = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nsegment-anything-hq = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nsegment-anything-py = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nsegmentation-models-pytorch = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nself-rewarding-lm-pytorch = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nsemantic-kernel = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nsemantic-router = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nsenselab = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nsent2vec = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nsentence-transformers = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nsequence-model-train = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nserotiny = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nsevenn = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nsglang = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nshap = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nsilero-api-server = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nsilero-vad = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nsilicondiff-npu = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nsimclr = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nsimple-lama-inpainting = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nsinabs = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nsixdrepnet = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nskforecast = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nskorch = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nskrl = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nskt = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nsktime = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nsktmls = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nslangtorch = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nsmartnoise-synth = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nsmashed = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nsmplx = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nsmqtk-descriptors = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nsmqtk-detection = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nsnntorch = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nsnorkel = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nsnowflake-ml-python = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nso-vits-svc-fork = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nsonusai = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nsony-custom-layers = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nsotopia = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nspacr = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nspacy-curated-transformers = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nspacy-experimental = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nspacy-huggingface-pipelines = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nspacy-llm = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nspacy-transformers = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nspan-marker = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nspandrel = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nspandrel-extra-arches = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nsparrow-python = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nspatialdata = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nspeechbrain = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nspeechtokenizer = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nspikeinterface = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nspikingjelly = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nspotiflow = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nspotpython = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nspotriver = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nsquirrel-core = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nstable-baselines3 = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nstable-diffusion-sdkit = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nstable-ts = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nstanford-stk = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nstanfordnlp = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nstanza = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nstartorch = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nstreamtasks = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nstruct-eqtable = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nstylegan2-pytorch = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nsupar = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nsuper-gradients = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nsuper-image = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nsuperlinked = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nsupervisely = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nsurya-ocr = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nsvdiff-pytorch = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nswarm-models = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nswarmauri = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nswarms-memory = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nswebench = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nsyft = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nsympytorch = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nsyne-tune = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nsynthcity = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nt5 = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ntab-transformer-pytorch = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ntabpfn = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ntaming-transformers = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ntaming-transformers-rom1504 = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ntaskwiz = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ntbparse = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ntecton = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ntensor-parallel = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ntensorcircuit-nightly = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ntensordict = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ntensordict-nightly = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ntensorizer = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ntensorrt-llm = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ntexify = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ntext2text = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ntextattack = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ntfkit = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nthepipe-api = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nthinc = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nthingsvision = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nthirdai = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nthop = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ntianshou = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ntidy3d = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ntimesfm = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ntimm = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ntipo-kgen = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ntmnt = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ntoad = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ntomesd = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ntop2vec = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ntorch = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ntorch-audiomentations = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ntorch-dct = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ntorch-delaunay = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ntorch-directml = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ntorch-ema = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ntorch-encoding = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ntorch-fidelity = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ntorch-geometric = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ntorch-geopooling = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ntorch-harmonics = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ntorch-kmeans = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ntorch-lr-finder = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ntorch-max-mem = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ntorch-npu = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ntorch-optimi = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ntorch-optimizer = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ntorch-ort = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ntorch-pitch-shift = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ntorch-ppr = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ntorch-pruning = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ntorch-snippets = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ntorch-stoi = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ntorch-struct = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ntorch-tensorrt = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ntorchani = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ntorchattacks = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ntorchaudio = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ntorchbiggraph = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ntorchcam = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ntorchcde = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ntorchcfm = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ntorchcrepe = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ntorchdata = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ntorchdatasets-nightly = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ntorchdiffeq = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ntorchdyn = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ntorchestra = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ntorcheval = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ntorcheval-nightly = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ntorchextractor = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ntorchfcpe = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ntorchfun = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ntorchfunc-nightly = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ntorchgeo = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ntorchgeometry = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ntorchio = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ntorchjpeg = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ntorchlayers-nightly = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ntorchmeta = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ntorchmetrics = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ntorchmocks = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ntorchpack = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ntorchpippy = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ntorchpq = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ntorchprofile = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ntorchquantlib = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ntorchrec = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ntorchrec-nightly = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ntorchrec-nightly-cpu = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ntorchrl = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ntorchrl-nightly = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ntorchscale = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ntorchsde = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ntorchseg = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ntorchserve = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ntorchserve-nightly = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ntorchsnapshot-nightly = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ntorchsr = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ntorchstain = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ntorchsummaryX = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ntorchtext = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ntorchtnt = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ntorchtnt-nightly = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ntorchtyping = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ntorchutil = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ntorchvinecopulib = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ntorchvision = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ntorchviz = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ntorchx = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ntorchx-nightly = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ntorchxrayvision = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ntotalspineseg = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ntracebloc-package-dev = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ntrainer = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ntransformer-engine = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ntransformer-lens = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ntransformer-smaller-training-vocab = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ntransformers = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ntransformers-domain-adaptation = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ntransfusion-pytorch = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ntransparent-background = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ntreescope = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ntrolo = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ntsai = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ntslearn = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nttspod = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ntxtai = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ntyro = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nu8darts = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nuhg = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nuitestrunner-syberos = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nultimate-rvc = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nultralytics = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nultralytics-thop = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nunav = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nunbabel-comet = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nunderthesea = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nunfoldNd = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nunimernet = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nunitorch = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nunitxt = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nunsloth = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nunsloth-zoo = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nunstructured = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nunstructured-inference = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nutilsd = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nv-diffusion-pytorch = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nvIQA = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nvectice = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nvector-quantize-pytorch = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nvectorhub-nightly = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nversatile-audio-upscaler = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nvertexai = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nvesin = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nvgg-pytorch = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nvideo-representations-extractor = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nviser = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nvision-datasets = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nvisionmetrics = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nvisu3d = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nvit-pytorch = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nviturka-nn = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nvllm = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nvllm-flash-attn = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nvocos = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nvollseg = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nvtorch = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nwavmark = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nwdoc = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nwhisper-live = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nwhisper-timestamped = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nwhisperx = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nwilds = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nwordllama = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nworker-automate-hub = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nwxbtool = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nx-clip = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nx-transformers = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nxaitk_saliency = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nxformers = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nxgrammar = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nxinference = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nxtts-api-server = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nyolo-poser = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nyolov5 = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nyolov7-package = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nyta-general-utils = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nzensvi = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nzetascale = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nzuko = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\n","size_bytes":90893},"replit.md":{"content":"# PyTorch ML Lab\n\n## Overview\n\nPyTorch ML Lab is an advanced web-based machine learning platform that combines deep learning capabilities using PyTorch with traditional machine learning algorithms from scikit-learn. The application provides a user-friendly interface for data upload, model training, evaluation, and prediction, making machine learning accessible through an intuitive web interface.\n\nThe platform supports both classification and regression tasks, offering comprehensive data preprocessing, model evaluation metrics, and visualization capabilities. Users can train neural networks for complex pattern recognition or utilize established algorithms like Random Forest and SVM for various machine learning tasks.\n\n## User Preferences\n\nPreferred communication style: Simple, everyday language.\n\n## System Architecture\n\n### Frontend Architecture\n- **Web Framework**: Flask-based web application with Jinja2 templating\n- **UI Framework**: Bootstrap 5 with dark theme for responsive design\n- **Client-side**: Vanilla JavaScript for interactive features like file uploads, feature selection, and model configuration\n- **Styling**: Custom CSS with hover effects and responsive layouts\n\n### Backend Architecture\n- **Web Framework**: Flask with SQLAlchemy ORM for database operations\n- **Model Architecture**: Abstract base class pattern with separate implementations for deep learning and traditional ML\n- **Data Processing Pipeline**: Modular preprocessing system with feature encoding, scaling, and missing value handling\n- **Session Management**: Flask sessions with configurable secret key\n- **File Handling**: Upload system for CSV datasets with temporary file processing\n\n### Machine Learning Components\n- **Deep Learning**: PyTorch-based neural networks with customizable architecture, GPU support, and automatic device detection\n- **Traditional ML**: Scikit-learn algorithms including Random Forest, Gradient Boosting, SVM, Logistic Regression, and k-NN\n- **Preprocessing**: Automated handling of categorical encoding, feature scaling, and data splitting\n- **Evaluation**: Comprehensive metrics for both classification and regression tasks\n- **Visualization**: Matplotlib and Seaborn for confusion matrices, ROC curves, and feature importance plots\n\n### Database Design\n- **ORM**: SQLAlchemy with declarative base pattern\n- **Models**: User management, saved model tracking, and dataset storage\n- **Relationships**: One-to-many relationships between users and their models/datasets\n- **Configuration**: PostgreSQL with connection pooling and health checks\n\n### Authentication & Authorization\n- **User Management**: Basic user model with password hashing using Werkzeug\n- **Session Handling**: Flask session-based authentication\n- **Admin Interface**: Administrative dashboard for user and data management\n\n## External Dependencies\n\n### Core Machine Learning Libraries\n- **PyTorch**: Deep learning framework for neural network implementation\n- **scikit-learn**: Traditional machine learning algorithms and preprocessing utilities\n- **pandas**: Data manipulation and analysis\n- **numpy**: Numerical computing and array operations\n\n### Web Framework & Database\n- **Flask**: Web application framework with SQLAlchemy integration\n- **PostgreSQL**: Primary database for production deployment\n- **SQLAlchemy**: ORM for database operations and model definitions\n\n### Data Visualization & Processing\n- **matplotlib**: Static plotting and visualization generation\n- **seaborn**: Statistical data visualization\n- **joblib**: Model serialization and persistence\n\n### Frontend Libraries\n- **Bootstrap 5**: CSS framework for responsive design\n- **Font Awesome**: Icon library for UI elements\n- **Replit Bootstrap Theme**: Dark theme customization\n\n### Development & Deployment\n- **Werkzeug**: WSGI utilities and security helpers\n- **ProxyFix**: Middleware for handling reverse proxy headers\n- **tempfile**: Temporary file handling for data processing","size_bytes":3950},"ml_models/base_model.py":{"content":"from abc import ABC, abstractmethod\n\nclass BaseModel(ABC):\n    \"\"\"\n    Abstract base class for all machine learning models\n    \"\"\"\n    \n    @abstractmethod\n    def train(self, X_train, y_train, X_val=None, y_val=None, is_classification=True):\n        \"\"\"\n        Train the model\n        \n        Args:\n            X_train: Training features\n            y_train: Training labels\n            X_val: Validation features (optional)\n            y_val: Validation labels (optional)\n            is_classification: Whether the task is classification or regression\n            \n        Returns:\n            Dictionary with training information\n        \"\"\"\n        pass\n    \n    @abstractmethod\n    def predict(self, X):\n        \"\"\"\n        Make predictions with the trained model\n        \n        Args:\n            X: Features to make predictions on\n            \n        Returns:\n            Predictions\n        \"\"\"\n        pass\n    \n    @abstractmethod\n    def get_feature_importance(self):\n        \"\"\"\n        Get feature importance from the model if available\n        \n        Returns:\n            Feature importance if available, else None\n        \"\"\"\n        pass\n    \n    @abstractmethod\n    def save(self, path):\n        \"\"\"\n        Save the model to disk\n        \n        Args:\n            path: Path to save the model\n        \"\"\"\n        pass\n    \n    @abstractmethod\n    def load(self, path):\n        \"\"\"\n        Load the model from disk\n        \n        Args:\n            path: Path to load the model from\n        \"\"\"\n        pass\n","size_bytes":1533},"ml_models/deep_learning.py":{"content":"import torch\nimport torch.nn as nn\nimport torch.optim as optim\nimport numpy as np\nfrom ml_models.base_model import BaseModel\nimport joblib\nimport os\nimport matplotlib.pyplot as plt\nfrom sklearn.preprocessing import StandardScaler\nimport logging\n\nlogger = logging.getLogger(__name__)\n\nclass NeuralNetwork(nn.Module):\n    \"\"\"\n    Neural network model for classification or regression\n    \"\"\"\n    def __init__(self, input_dim, hidden_dim, output_dim, dropout_rate=0.2):\n        super(NeuralNetwork, self).__init__()\n        self.network = nn.Sequential(\n            nn.Linear(input_dim, hidden_dim),\n            nn.ReLU(),\n            nn.Dropout(dropout_rate),\n            nn.Linear(hidden_dim, hidden_dim // 2),\n            nn.ReLU(),\n            nn.Dropout(dropout_rate),\n            nn.Linear(hidden_dim // 2, output_dim)\n        )\n    \n    def forward(self, x):\n        return self.network(x)\n\n\nclass DeepLearningModel(BaseModel):\n    \"\"\"\n    Implementation of deep learning model using PyTorch\n    \"\"\"\n    def __init__(self, input_dim, hidden_dim=64, output_dim=1, learning_rate=0.001, epochs=100):\n        self.input_dim = input_dim\n        self.hidden_dim = hidden_dim\n        self.output_dim = output_dim\n        self.learning_rate = learning_rate\n        self.epochs = epochs\n        self.model = NeuralNetwork(input_dim, hidden_dim, output_dim)\n        self.scaler = StandardScaler()\n        self.is_classification = True\n        self.device = torch.device(\"cuda:0\" if torch.cuda.is_available() else \"cpu\")\n        self.model.to(self.device)\n        \n    def train(self, X_train, y_train, X_val=None, y_val=None, is_classification=True):\n        \"\"\"\n        Train the PyTorch model\n        \n        Args:\n            X_train: Training features\n            y_train: Training labels\n            X_val: Validation features\n            y_val: Validation labels\n            is_classification: Whether it's a classification problem\n            \n        Returns:\n            Dictionary with training information\n        \"\"\"\n        self.is_classification = is_classification\n        \n        # Scale the features\n        X_train_scaled = self.scaler.fit_transform(X_train)\n        \n        # Convert to PyTorch tensors\n        X_train_tensor = torch.FloatTensor(X_train_scaled).to(self.device)\n        \n        # Convert pandas Series to numpy array if needed\n        if hasattr(y_train, 'values'):\n            y_train_np = y_train.values\n        else:\n            y_train_np = y_train\n            \n        # Check if target contains non-numeric data\n        if isinstance(y_train_np[0], (str, bytes)) or (hasattr(y_train_np[0], 'dtype') and np.issubdtype(y_train_np[0].dtype, np.datetime64)):\n            raise ValueError(\"Cannot train neural network on string or datetime values. Please select a numeric target column.\")\n        \n        # Convert to appropriate numpy data type\n        if is_classification:\n            if self.output_dim > 1:  # Multi-class\n                y_train_np = y_train_np.astype(int)\n                y_train_tensor = torch.LongTensor(y_train_np).to(self.device)\n                criterion = nn.CrossEntropyLoss()\n            else:  # Binary classification\n                y_train_np = y_train_np.astype(float)\n                y_train_tensor = torch.FloatTensor(y_train_np.reshape(-1, 1)).to(self.device)\n                criterion = nn.BCEWithLogitsLoss()\n        else:  # Regression\n            y_train_np = y_train_np.astype(float)\n            y_train_tensor = torch.FloatTensor(y_train_np.reshape(-1, 1)).to(self.device)\n            criterion = nn.MSELoss()\n        \n        # Validation data\n        if X_val is not None and y_val is not None:\n            X_val_scaled = self.scaler.transform(X_val)\n            X_val_tensor = torch.FloatTensor(X_val_scaled).to(self.device)\n            \n            # Convert pandas Series to numpy array if needed\n            if hasattr(y_val, 'values'):\n                y_val_np = y_val.values\n            else:\n                y_val_np = y_val\n                \n            # Check if target contains non-numeric data\n            if isinstance(y_val_np[0], (str, bytes)) or (hasattr(y_val_np[0], 'dtype') and np.issubdtype(y_val_np[0].dtype, np.datetime64)):\n                raise ValueError(\"Cannot validate neural network on string or datetime values. Please select a numeric target column.\")\n            \n            # Convert to appropriate numpy data type\n            if is_classification:\n                if self.output_dim > 1:  # Multi-class\n                    y_val_np = y_val_np.astype(int)\n                    y_val_tensor = torch.LongTensor(y_val_np).to(self.device)\n                else:  # Binary classification\n                    y_val_np = y_val_np.astype(float)\n                    y_val_tensor = torch.FloatTensor(y_val_np.reshape(-1, 1)).to(self.device)\n            else:  # Regression\n                y_val_np = y_val_np.astype(float)\n                y_val_tensor = torch.FloatTensor(y_val_np.reshape(-1, 1)).to(self.device)\n        \n        # Optimizer\n        optimizer = optim.Adam(self.model.parameters(), lr=self.learning_rate)\n        \n        # For early stopping\n        best_val_loss = float('inf')\n        patience = 10\n        patience_counter = 0\n        \n        # Training history\n        train_losses = []\n        val_losses = []\n        \n        # Training loop\n        self.model.train()\n        \n        for epoch in range(self.epochs):\n            # Forward pass\n            if is_classification and self.output_dim > 1:\n                outputs = self.model(X_train_tensor)\n                loss = criterion(outputs, y_train_tensor)\n            else:\n                outputs = self.model(X_train_tensor)\n                loss = criterion(outputs, y_train_tensor)\n            \n            # Backward and optimize\n            optimizer.zero_grad()\n            loss.backward()\n            optimizer.step()\n            \n            train_losses.append(loss.item())\n            \n            # Validation\n            if X_val is not None and y_val is not None:\n                self.model.eval()\n                with torch.no_grad():\n                    if is_classification and self.output_dim > 1:\n                        val_outputs = self.model(X_val_tensor)\n                        val_loss = criterion(val_outputs, y_val_tensor)\n                    else:\n                        val_outputs = self.model(X_val_tensor)\n                        val_loss = criterion(val_outputs, y_val_tensor)\n                \n                val_losses.append(val_loss.item())\n                \n                # Early stopping\n                if val_loss.item() < best_val_loss:\n                    best_val_loss = val_loss.item()\n                    patience_counter = 0\n                else:\n                    patience_counter += 1\n                \n                if patience_counter >= patience:\n                    logger.info(f\"Early stopping at epoch {epoch+1}\")\n                    break\n                \n                self.model.train()\n            \n            # Log progress\n            if (epoch+1) % 10 == 0:\n                if X_val is not None and y_val is not None:\n                    logger.info(f'Epoch [{epoch+1}/{self.epochs}], Train Loss: {loss.item():.4f}, Val Loss: {val_loss.item():.4f}')\n                else:\n                    logger.info(f'Epoch [{epoch+1}/{self.epochs}], Loss: {loss.item():.4f}')\n        \n        # Create training plot\n        plt.figure(figsize=(10, 6))\n        plt.plot(train_losses, label='Training Loss')\n        if val_losses:\n            plt.plot(val_losses, label='Validation Loss')\n        plt.xlabel('Epochs')\n        plt.ylabel('Loss')\n        plt.title('Training and Validation Loss')\n        plt.legend()\n        \n        # Save the plot to a file\n        plot_path = 'static/training_plot.png'\n        plt.savefig(plot_path)\n        plt.close()\n        \n        # Return training information\n        return {\n            'epochs_completed': min(epoch+1, self.epochs),\n            'final_train_loss': train_losses[-1],\n            'final_val_loss': val_losses[-1] if val_losses else None,\n            'best_val_loss': best_val_loss if val_losses else None,\n            'early_stopped': patience_counter >= patience,\n            'training_plot': plot_path\n        }\n        \n    def predict(self, X):\n        \"\"\"\n        Make predictions with the trained model\n        \n        Args:\n            X: Features to make predictions on\n            \n        Returns:\n            Predictions\n        \"\"\"\n        # Scale the features\n        X_scaled = self.scaler.transform(X)\n        \n        # Convert to PyTorch tensor\n        X_tensor = torch.FloatTensor(X_scaled).to(self.device)\n        \n        # Set model to evaluation mode\n        self.model.eval()\n        \n        # Make predictions\n        with torch.no_grad():\n            outputs = self.model(X_tensor)\n            \n            if self.is_classification:\n                if self.output_dim > 1:  # Multi-class\n                    _, predicted = torch.max(outputs, 1)\n                    return predicted.cpu().numpy()\n                else:  # Binary classification\n                    predicted = (torch.sigmoid(outputs) > 0.5).float()\n                    return predicted.cpu().numpy()\n            else:  # Regression\n                return outputs.cpu().numpy()\n    \n    def get_feature_importance(self):\n        \"\"\"\n        Get feature importance for deep learning models\n        \n        For neural networks, we'll use a simple gradient-based approach to estimate importance\n        \"\"\"\n        # Not implemented for this simple example\n        # In a real-world scenario, you could use techniques like permutation importance\n        # or integrated gradients\n        return None\n    \n    def save(self, path):\n        \"\"\"\n        Save the model to disk\n        \n        Args:\n            path: Path to save the model\n        \"\"\"\n        model_info = {\n            'model_state_dict': self.model.state_dict(),\n            'scaler': self.scaler,\n            'input_dim': self.input_dim,\n            'hidden_dim': self.hidden_dim,\n            'output_dim': self.output_dim,\n            'is_classification': self.is_classification\n        }\n        torch.save(model_info, path)\n    \n    def load(self, path):\n        \"\"\"\n        Load the model from disk\n        \n        Args:\n            path: Path to load the model from\n        \"\"\"\n        model_info = torch.load(path, map_location=self.device)\n        \n        self.input_dim = model_info['input_dim']\n        self.hidden_dim = model_info['hidden_dim']\n        self.output_dim = model_info['output_dim']\n        self.is_classification = model_info['is_classification']\n        \n        self.model = NeuralNetwork(self.input_dim, self.hidden_dim, self.output_dim)\n        self.model.load_state_dict(model_info['model_state_dict'])\n        self.model.to(self.device)\n        \n        self.scaler = model_info['scaler']\n","size_bytes":10983},"ml_models/traditional_ml.py":{"content":"import numpy as np\nfrom sklearn.ensemble import RandomForestClassifier, RandomForestRegressor, GradientBoostingClassifier, GradientBoostingRegressor\nfrom sklearn.linear_model import LogisticRegression, LinearRegression, Lasso, Ridge\nfrom sklearn.svm import SVC, SVR\nfrom sklearn.neighbors import KNeighborsClassifier, KNeighborsRegressor\nfrom sklearn.preprocessing import StandardScaler\nfrom ml_models.base_model import BaseModel\nimport joblib\nimport matplotlib.pyplot as plt\nimport logging\n\nlogger = logging.getLogger(__name__)\n\nclass TraditionalMLModel(BaseModel):\n    \"\"\"\n    Implementation of traditional machine learning models using scikit-learn\n    \"\"\"\n    def __init__(self, model_name='random_forest', params=None):\n        self.model_name = model_name\n        self.params = params if params is not None else {}\n        self.model = None\n        self.scaler = StandardScaler()\n        self.is_classification = True\n        self.feature_names = None\n        self.target_encoder = None\n        self.target_type = None\n    \n    def _get_model(self, is_classification=True):\n        \"\"\"\n        Get the appropriate model based on the model name and task\n        \n        Args:\n            is_classification: Whether it's a classification problem\n            \n        Returns:\n            Scikit-learn model instance\n        \"\"\"\n        self.is_classification = is_classification\n        \n        if is_classification:\n            if self.model_name == 'random_forest':\n                return RandomForestClassifier(**self.params)\n            elif self.model_name == 'gradient_boosting':\n                return GradientBoostingClassifier(**self.params)\n            elif self.model_name == 'logistic_regression':\n                return LogisticRegression(**self.params)\n            elif self.model_name == 'svm':\n                return SVC(probability=True, **self.params)\n            elif self.model_name == 'knn':\n                return KNeighborsClassifier(**self.params)\n            else:\n                raise ValueError(f\"Unknown classification model: {self.model_name}\")\n        else:\n            if self.model_name == 'random_forest':\n                return RandomForestRegressor(**self.params)\n            elif self.model_name == 'gradient_boosting':\n                return GradientBoostingRegressor(**self.params)\n            elif self.model_name == 'linear_regression':\n                return LinearRegression(**self.params)\n            elif self.model_name == 'lasso':\n                return Lasso(**self.params)\n            elif self.model_name == 'ridge':\n                return Ridge(**self.params)\n            elif self.model_name == 'svm':\n                return SVR(**self.params)\n            elif self.model_name == 'knn':\n                return KNeighborsRegressor(**self.params)\n            else:\n                raise ValueError(f\"Unknown regression model: {self.model_name}\")\n        \n    def train(self, X_train, y_train, X_val=None, y_val=None, is_classification=True):\n        \"\"\"\n        Train the model\n        \n        Args:\n            X_train: Training features\n            y_train: Training labels\n            X_val: Validation features (optional)\n            y_val: Validation labels (optional)\n            is_classification: Whether it's a classification problem\n            \n        Returns:\n            Dictionary with training information\n        \"\"\"\n        # Store feature names if available\n        if hasattr(X_train, 'columns'):\n            self.feature_names = X_train.columns.tolist()\n        \n        # Scale the features\n        X_train_scaled = self.scaler.fit_transform(X_train)\n        \n        # Get the model\n        self.model = self._get_model(is_classification)\n        \n        # Convert pandas Series to numpy array if needed\n        if hasattr(y_train, 'values'):\n            y_train_np = y_train.values\n        else:\n            y_train_np = y_train\n            \n        # Handle different target data types\n        if isinstance(y_train_np[0], (str, bytes)):\n            if is_classification:\n                # For string targets in classification, we encode them as integers\n                unique_values = np.unique(y_train_np)\n                value_to_idx = {val: idx for idx, val in enumerate(unique_values)}\n                self.target_encoder = value_to_idx\n                y_train_encoded = np.array([value_to_idx[val] for val in y_train_np])\n                y_train_np = y_train_encoded\n            else:\n                # Cannot do regression on string targets\n                raise ValueError(\"Cannot perform regression on string values. Please select a numeric target column.\")\n        elif hasattr(y_train_np[0], 'dtype') and np.issubdtype(y_train_np[0].dtype, np.datetime64):\n            # Cannot train on datetime directly\n            raise ValueError(\"Cannot train model on datetime values directly. Please extract numeric features from dates (like year, month, etc).\")\n        else:\n            # For numeric targets, ensure they are in the right format\n            if is_classification:\n                y_train_np = y_train_np.astype(int)\n            else:\n                y_train_np = y_train_np.astype(float)\n                \n        # Train the model\n        self.model.fit(X_train_scaled, y_train_np)\n        \n        # Store the type of target for later use\n        self.target_type = type(y_train_np[0]).__name__\n        \n        # Training info\n        training_info = {\n            'model_type': self.model_name,\n            'task': 'classification' if is_classification else 'regression',\n            'n_samples': X_train.shape[0],\n            'n_features': X_train.shape[1]\n        }\n        \n        # For models that have feature importances\n        if hasattr(self.model, 'feature_importances_'):\n            feature_importance = self.model.feature_importances_\n            training_info['feature_importance'] = feature_importance.tolist()\n            \n            # Create feature importance plot\n            plt.figure(figsize=(10, 6))\n            \n            if self.feature_names:\n                feature_names = self.feature_names\n            else:\n                feature_names = [f'Feature {i}' for i in range(len(feature_importance))]\n            \n            sorted_idx = np.argsort(feature_importance)\n            plt.barh(range(len(sorted_idx)), feature_importance[sorted_idx])\n            plt.yticks(range(len(sorted_idx)), [feature_names[i] for i in sorted_idx])\n            plt.xlabel('Feature Importance')\n            plt.title('Feature Importance (Higher is More Important)')\n            \n            # Save the plot to a file\n            importance_path = 'static/feature_importance.png'\n            plt.savefig(importance_path)\n            plt.close()\n            \n            training_info['importance_plot'] = importance_path\n            \n        return training_info\n    \n    def predict(self, X):\n        \"\"\"\n        Make predictions with the trained model\n        \n        Args:\n            X: Features to make predictions on\n            \n        Returns:\n            Predictions\n        \"\"\"\n        if self.model is None:\n            raise ValueError(\"Model has not been trained yet\")\n        \n        # Handle X as pandas DataFrame\n        if hasattr(X, 'values'):\n            # Scale the features\n            X_scaled = self.scaler.transform(X)\n        else:\n            # Scale the features\n            X_scaled = self.scaler.transform(X)\n        \n        # Make predictions\n        predictions = self.model.predict(X_scaled)\n        \n        # Decode string targets if needed\n        if self.is_classification and self.target_encoder is not None:\n            # Invert the encoder mapping\n            idx_to_value = {idx: val for val, idx in self.target_encoder.items()}\n            # Decode the predictions\n            return np.array([idx_to_value[pred] for pred in predictions])\n        \n        return predictions\n    \n    def predict_proba(self, X):\n        \"\"\"\n        Get probability predictions for classification\n        \n        Args:\n            X: Features to make predictions on\n            \n        Returns:\n            Probability predictions\n        \"\"\"\n        if self.model is None:\n            raise ValueError(\"Model has not been trained yet\")\n        \n        if not self.is_classification:\n            raise ValueError(\"predict_proba is only available for classification models\")\n        \n        # Handle X as pandas DataFrame\n        if hasattr(X, 'values'):\n            # Scale the features\n            X_scaled = self.scaler.transform(X)\n        else:\n            # Scale the features\n            X_scaled = self.scaler.transform(X)\n        \n        # Check if the model has predict_proba method\n        if hasattr(self.model, 'predict_proba'):\n            return self.model.predict_proba(X_scaled)\n        else:\n            raise ValueError(f\"The model {self.model_name} does not support probability predictions\")\n    \n    def get_feature_importance(self):\n        \"\"\"\n        Get feature importance if available\n        \n        Returns:\n            Feature importance if available, else None\n        \"\"\"\n        if self.model is None:\n            raise ValueError(\"Model has not been trained yet\")\n        \n        if hasattr(self.model, 'feature_importances_'):\n            importance = self.model.feature_importances_\n            \n            if self.feature_names:\n                return dict(zip(self.feature_names, importance))\n            else:\n                return importance\n        elif hasattr(self.model, 'coef_'):\n            coef = self.model.coef_\n            \n            if self.feature_names:\n                if len(coef.shape) == 1:\n                    return dict(zip(self.feature_names, coef))\n                else:\n                    return {f\"Class {i}\": dict(zip(self.feature_names, coef[i])) for i in range(coef.shape[0])}\n            else:\n                return coef\n        else:\n            return None\n    \n    def save(self, path):\n        \"\"\"\n        Save the model to disk\n        \n        Args:\n            path: Path to save the model\n        \"\"\"\n        if self.model is None:\n            raise ValueError(\"Model has not been trained yet\")\n        \n        model_info = {\n            'model': self.model,\n            'scaler': self.scaler,\n            'model_name': self.model_name,\n            'is_classification': self.is_classification,\n            'feature_names': self.feature_names,\n            'target_encoder': self.target_encoder,\n            'target_type': self.target_type\n        }\n        \n        joblib.dump(model_info, path)\n    \n    def load(self, path):\n        \"\"\"\n        Load the model from disk\n        \n        Args:\n            path: Path to load the model from\n        \"\"\"\n        model_info = joblib.load(path)\n        \n        self.model = model_info['model']\n        self.scaler = model_info['scaler']\n        self.model_name = model_info['model_name']\n        self.is_classification = model_info['is_classification']\n        self.feature_names = model_info['feature_names']\n        \n        # Load target encoding information if available\n        self.target_encoder = model_info.get('target_encoder', None)\n        self.target_type = model_info.get('target_type', None)\n","size_bytes":11287},"utils/data_preprocessing.py":{"content":"import pandas as pd\nimport numpy as np\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import LabelEncoder, StandardScaler, OneHotEncoder\nfrom sklearn.impute import SimpleImputer\nimport logging\n\nlogger = logging.getLogger(__name__)\n\nclass DataPreprocessor:\n    \"\"\"\n    Class for preprocessing data for machine learning models\n    \"\"\"\n    def __init__(self):\n        self.label_encoders = {}\n        self.one_hot_encoders = {}\n        self.numeric_imputer = SimpleImputer(strategy='mean')\n        self.categorical_imputer = SimpleImputer(strategy='most_frequent')\n        self.scaler = StandardScaler()\n    \n    def preprocess_data(self, df, feature_cols, target_col, test_size=0.2, random_state=42):\n        \"\"\"\n        Preprocess the data for model training\n        \n        Args:\n            df: Pandas DataFrame with the data\n            feature_cols: List of feature column names\n            target_col: Target column name\n            test_size: Size of the test set\n            random_state: Random state for reproducibility\n            \n        Returns:\n            X_train, X_test, y_train, y_test\n        \"\"\"\n        logger.info(f\"Preprocessing data with {len(feature_cols)} features and target: {target_col}\")\n        \n        # Extract features and target\n        X = df[feature_cols].copy()\n        y = df[target_col].copy()\n        \n        # Handle missing values in features\n        X = self._handle_missing_values(X)\n        \n        # Encode categorical features\n        X = self._encode_categorical_features(X)\n        \n        # Split the data\n        X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=test_size, random_state=random_state)\n        \n        logger.info(f\"Data split: {X_train.shape[0]} training samples, {X_test.shape[0]} test samples\")\n        \n        return X_train, X_test, y_train, y_test\n    \n    def _handle_missing_values(self, df):\n        \"\"\"\n        Handle missing values in the DataFrame\n        \n        Args:\n            df: Pandas DataFrame with features\n            \n        Returns:\n            DataFrame with missing values handled\n        \"\"\"\n        # Identify numeric and categorical columns\n        numeric_cols = df.select_dtypes(include=np.number).columns.tolist()\n        categorical_cols = df.select_dtypes(exclude=np.number).columns.tolist()\n        \n        # Handle missing values in numeric columns\n        if numeric_cols:\n            df[numeric_cols] = self.numeric_imputer.fit_transform(df[numeric_cols])\n        \n        # Handle missing values in categorical columns\n        if categorical_cols:\n            df[categorical_cols] = self.categorical_imputer.fit_transform(df[categorical_cols])\n        \n        return df\n    \n    def _encode_categorical_features(self, df):\n        \"\"\"\n        Encode categorical features\n        \n        Args:\n            df: Pandas DataFrame with features\n            \n        Returns:\n            DataFrame with encoded categorical features\n        \"\"\"\n        # Identify categorical columns\n        categorical_cols = df.select_dtypes(include=['object', 'category']).columns.tolist()\n        \n        for col in categorical_cols:\n            # For columns with fewer unique values, use one-hot encoding\n            if df[col].nunique() < 10:\n                # Create a one-hot encoder for this column\n                encoder = OneHotEncoder(sparse=False, handle_unknown='ignore')\n                \n                # Fit and transform the column\n                encoded = encoder.fit_transform(df[[col]])\n                \n                # Create new column names\n                encoded_cols = [f\"{col}_{val}\" for val in encoder.categories_[0]]\n                \n                # Create a new DataFrame with the encoded columns\n                encoded_df = pd.DataFrame(encoded, index=df.index, columns=encoded_cols)\n                \n                # Drop the original column and add the encoded columns\n                df = pd.concat([df.drop(col, axis=1), encoded_df], axis=1)\n                \n                # Store the encoder\n                self.one_hot_encoders[col] = encoder\n            else:\n                # For columns with many unique values, use label encoding\n                encoder = LabelEncoder()\n                \n                # Fit and transform the column\n                df[col] = encoder.fit_transform(df[col])\n                \n                # Store the encoder\n                self.label_encoders[col] = encoder\n        \n        return df\n    \n    def transform_data(self, df, feature_cols):\n        \"\"\"\n        Transform new data using the same preprocessing steps\n        \n        Args:\n            df: Pandas DataFrame with features\n            feature_cols: List of feature column names\n            \n        Returns:\n            Preprocessed features\n        \"\"\"\n        # Extract features\n        X = df[feature_cols].copy()\n        \n        # Handle missing values in features\n        X = self._transform_missing_values(X)\n        \n        # Encode categorical features\n        X = self._transform_categorical_features(X)\n        \n        return X\n    \n    def _transform_missing_values(self, df):\n        \"\"\"\n        Transform missing values in new data\n        \n        Args:\n            df: Pandas DataFrame with features\n            \n        Returns:\n            DataFrame with missing values handled\n        \"\"\"\n        # Identify numeric and categorical columns\n        numeric_cols = df.select_dtypes(include=np.number).columns.tolist()\n        categorical_cols = df.select_dtypes(exclude=np.number).columns.tolist()\n        \n        # Handle missing values in numeric columns\n        if numeric_cols:\n            df[numeric_cols] = self.numeric_imputer.transform(df[numeric_cols])\n        \n        # Handle missing values in categorical columns\n        if categorical_cols:\n            df[categorical_cols] = self.categorical_imputer.transform(df[categorical_cols])\n        \n        return df\n    \n    def _transform_categorical_features(self, df):\n        \"\"\"\n        Transform categorical features in new data\n        \n        Args:\n            df: Pandas DataFrame with features\n            \n        Returns:\n            DataFrame with encoded categorical features\n        \"\"\"\n        # Transform one-hot encoded columns\n        for col, encoder in self.one_hot_encoders.items():\n            if col in df.columns:\n                # Transform the column\n                encoded = encoder.transform(df[[col]])\n                \n                # Create new column names\n                encoded_cols = [f\"{col}_{val}\" for val in encoder.categories_[0]]\n                \n                # Create a new DataFrame with the encoded columns\n                encoded_df = pd.DataFrame(encoded, index=df.index, columns=encoded_cols)\n                \n                # Drop the original column and add the encoded columns\n                df = pd.concat([df.drop(col, axis=1), encoded_df], axis=1)\n        \n        # Transform label encoded columns\n        for col, encoder in self.label_encoders.items():\n            if col in df.columns:\n                # Transform the column\n                df[col] = encoder.transform(df[col])\n        \n        return df\n","size_bytes":7248},"utils/evaluation.py":{"content":"import numpy as np\nfrom sklearn.metrics import (\n    accuracy_score, precision_score, recall_score, f1_score, \n    roc_auc_score, confusion_matrix, mean_squared_error, mean_absolute_error,\n    r2_score, explained_variance_score\n)\nimport logging\n\nlogger = logging.getLogger(__name__)\n\nclass ModelEvaluator:\n    \"\"\"\n    Class for evaluating machine learning models\n    \"\"\"\n    def evaluate_model(self, model, X_test, y_test, is_classification=True):\n        \"\"\"\n        Evaluate the model performance\n        \n        Args:\n            model: Trained model\n            X_test: Test features\n            y_test: Test labels\n            is_classification: Whether it's a classification problem\n            \n        Returns:\n            Dictionary with evaluation metrics\n        \"\"\"\n        # Get predictions\n        y_pred = model.predict(X_test)\n        \n        # Calculate metrics based on the task\n        if is_classification:\n            return self._evaluate_classification(y_test, y_pred, model)\n        else:\n            return self._evaluate_regression(y_test, y_pred)\n    \n    def _evaluate_classification(self, y_true, y_pred, model):\n        \"\"\"\n        Evaluate classification model\n        \n        Args:\n            y_true: True labels\n            y_pred: Predicted labels\n            model: Trained model\n            \n        Returns:\n            Dictionary with classification metrics\n        \"\"\"\n        # Initialize metrics dictionary\n        metrics = {}\n        \n        # Basic metrics\n        metrics['accuracy'] = accuracy_score(y_true, y_pred)\n        \n        # Check if binary or multiclass\n        is_binary = len(np.unique(y_true)) == 2\n        \n        if is_binary:\n            metrics['precision'] = precision_score(y_true, y_pred, average='binary')\n            metrics['recall'] = recall_score(y_true, y_pred, average='binary')\n            metrics['f1'] = f1_score(y_true, y_pred, average='binary')\n            \n            # ROC AUC if the model supports probability predictions\n            if hasattr(model, 'predict_proba'):\n                try:\n                    y_prob = model.predict_proba(X_test)[:, 1]\n                    metrics['roc_auc'] = roc_auc_score(y_true, y_prob)\n                except:\n                    # Some models or implementation might not have predict_proba\n                    logger.warning(\"Could not calculate ROC AUC score\")\n        else:\n            # Multiclass metrics\n            metrics['precision_micro'] = precision_score(y_true, y_pred, average='micro')\n            metrics['precision_macro'] = precision_score(y_true, y_pred, average='macro')\n            metrics['recall_micro'] = recall_score(y_true, y_pred, average='micro')\n            metrics['recall_macro'] = recall_score(y_true, y_pred, average='macro')\n            metrics['f1_micro'] = f1_score(y_true, y_pred, average='micro')\n            metrics['f1_macro'] = f1_score(y_true, y_pred, average='macro')\n        \n        # Confusion matrix\n        cm = confusion_matrix(y_true, y_pred)\n        metrics['confusion_matrix'] = cm.tolist()\n        \n        logger.info(f\"Classification metrics: {metrics}\")\n        \n        return metrics\n    \n    def _evaluate_regression(self, y_true, y_pred):\n        \"\"\"\n        Evaluate regression model\n        \n        Args:\n            y_true: True values\n            y_pred: Predicted values\n            \n        Returns:\n            Dictionary with regression metrics\n        \"\"\"\n        # Initialize metrics dictionary\n        metrics = {}\n        \n        # Regression metrics\n        metrics['mse'] = mean_squared_error(y_true, y_pred)\n        metrics['rmse'] = np.sqrt(metrics['mse'])\n        metrics['mae'] = mean_absolute_error(y_true, y_pred)\n        metrics['r2'] = r2_score(y_true, y_pred)\n        metrics['explained_variance'] = explained_variance_score(y_true, y_pred)\n        \n        logger.info(f\"Regression metrics: {metrics}\")\n        \n        return metrics\n","size_bytes":3948},"utils/visualization.py":{"content":"import matplotlib.pyplot as plt\nimport seaborn as sns\nimport numpy as np\nfrom sklearn.metrics import confusion_matrix, roc_curve, precision_recall_curve\nfrom sklearn.inspection import permutation_importance\nimport os\nimport logging\n\nlogger = logging.getLogger(__name__)\n\nclass Visualizer:\n    \"\"\"\n    Class for creating visualizations for machine learning models\n    \"\"\"\n    def __init__(self):\n        # Create the static directory if it doesn't exist\n        os.makedirs('static', exist_ok=True)\n        \n        # Use dark background for plots to match the Bootstrap theme\n        plt.style.use('dark_background')\n    \n    def create_visualizations(self, model, X_test, y_test, is_classification=True):\n        \"\"\"\n        Create visualizations for model evaluation\n        \n        Args:\n            model: Trained model\n            X_test: Test features\n            y_test: Test labels\n            is_classification: Whether it's a classification problem\n            \n        Returns:\n            Dictionary with paths to the visualization files\n        \"\"\"\n        plot_paths = {}\n        \n        # Get predictions\n        y_pred = model.predict(X_test)\n        \n        # Create visualizations based on the task\n        if is_classification:\n            plot_paths.update(self._create_classification_plots(model, X_test, y_test, y_pred))\n        else:\n            plot_paths.update(self._create_regression_plots(y_test, y_pred))\n        \n        # Feature importance plot if available\n        if hasattr(model, 'get_feature_importance') and model.get_feature_importance() is not None:\n            plot_paths['feature_importance'] = self._create_feature_importance_plot(model, X_test)\n        \n        return plot_paths\n    \n    def _create_classification_plots(self, model, X_test, y_test, y_pred):\n        \"\"\"\n        Create plots for classification models\n        \n        Args:\n            model: Trained model\n            X_test: Test features\n            y_test: Test labels\n            y_pred: Predicted labels\n            \n        Returns:\n            Dictionary with paths to the classification plots\n        \"\"\"\n        plots = {}\n        \n        # Confusion matrix plot\n        cm_path = 'static/confusion_matrix.png'\n        plots['confusion_matrix'] = self._create_confusion_matrix_plot(y_test, y_pred, cm_path)\n        \n        # Check if binary classification\n        if len(np.unique(y_test)) == 2:\n            # ROC curve if the model supports probability predictions\n            if hasattr(model, 'predict_proba'):\n                try:\n                    y_prob = model.predict_proba(X_test)[:, 1]\n                    roc_path = 'static/roc_curve.png'\n                    plots['roc_curve'] = self._create_roc_curve_plot(y_test, y_prob, roc_path)\n                    \n                    # Precision-recall curve\n                    pr_path = 'static/precision_recall_curve.png'\n                    plots['precision_recall_curve'] = self._create_precision_recall_curve_plot(y_test, y_prob, pr_path)\n                except:\n                    logger.warning(\"Could not create ROC or PR curve plots\")\n        \n        return plots\n    \n    def _create_regression_plots(self, y_test, y_pred):\n        \"\"\"\n        Create plots for regression models\n        \n        Args:\n            y_test: True values\n            y_pred: Predicted values\n            \n        Returns:\n            Dictionary with paths to the regression plots\n        \"\"\"\n        plots = {}\n        \n        # Predicted vs Actual plot\n        pred_actual_path = 'static/predicted_vs_actual.png'\n        plots['predicted_vs_actual'] = self._create_predicted_vs_actual_plot(y_test, y_pred, pred_actual_path)\n        \n        # Residuals plot\n        residuals_path = 'static/residuals.png'\n        plots['residuals'] = self._create_residuals_plot(y_test, y_pred, residuals_path)\n        \n        # Residuals distribution plot\n        residuals_dist_path = 'static/residuals_distribution.png'\n        plots['residuals_distribution'] = self._create_residuals_distribution_plot(y_test, y_pred, residuals_dist_path)\n        \n        return plots\n    \n    def _create_confusion_matrix_plot(self, y_true, y_pred, output_path):\n        \"\"\"\n        Create confusion matrix plot\n        \n        Args:\n            y_true: True labels\n            y_pred: Predicted labels\n            output_path: Path to save the plot\n            \n        Returns:\n            Path to the saved plot\n        \"\"\"\n        plt.figure(figsize=(8, 6))\n        cm = confusion_matrix(y_true, y_pred)\n        \n        # Get the number of classes\n        n_classes = cm.shape[0]\n        \n        # Create a heatmap\n        sns.heatmap(cm, annot=True, fmt='d', cmap='Blues', cbar=False)\n        \n        plt.title('Confusion Matrix')\n        plt.ylabel('True Label')\n        plt.xlabel('Predicted Label')\n        \n        # Add class labels if few classes\n        if n_classes <= 10:\n            plt.xticks(np.arange(n_classes) + 0.5, range(n_classes))\n            plt.yticks(np.arange(n_classes) + 0.5, range(n_classes))\n        \n        plt.tight_layout()\n        plt.savefig(output_path)\n        plt.close()\n        \n        return output_path\n    \n    def _create_roc_curve_plot(self, y_true, y_prob, output_path):\n        \"\"\"\n        Create ROC curve plot\n        \n        Args:\n            y_true: True labels\n            y_prob: Predicted probabilities for the positive class\n            output_path: Path to save the plot\n            \n        Returns:\n            Path to the saved plot\n        \"\"\"\n        plt.figure(figsize=(8, 6))\n        \n        # Calculate ROC curve\n        fpr, tpr, _ = roc_curve(y_true, y_prob)\n        \n        # Plot ROC curve\n        plt.plot(fpr, tpr, label='ROC curve')\n        plt.plot([0, 1], [0, 1], 'k--', label='Random')\n        \n        plt.xlabel('False Positive Rate')\n        plt.ylabel('True Positive Rate')\n        plt.title('Receiver Operating Characteristic (ROC) Curve')\n        plt.legend()\n        plt.grid(alpha=0.3)\n        \n        plt.tight_layout()\n        plt.savefig(output_path)\n        plt.close()\n        \n        return output_path\n    \n    def _create_precision_recall_curve_plot(self, y_true, y_prob, output_path):\n        \"\"\"\n        Create precision-recall curve plot\n        \n        Args:\n            y_true: True labels\n            y_prob: Predicted probabilities for the positive class\n            output_path: Path to save the plot\n            \n        Returns:\n            Path to the saved plot\n        \"\"\"\n        plt.figure(figsize=(8, 6))\n        \n        # Calculate precision-recall curve\n        precision, recall, _ = precision_recall_curve(y_true, y_prob)\n        \n        # Plot precision-recall curve\n        plt.plot(recall, precision, label='Precision-Recall curve')\n        \n        plt.xlabel('Recall')\n        plt.ylabel('Precision')\n        plt.title('Precision-Recall Curve')\n        plt.legend()\n        plt.grid(alpha=0.3)\n        \n        plt.tight_layout()\n        plt.savefig(output_path)\n        plt.close()\n        \n        return output_path\n    \n    def _create_predicted_vs_actual_plot(self, y_true, y_pred, output_path):\n        \"\"\"\n        Create predicted vs actual plot for regression\n        \n        Args:\n            y_true: True values\n            y_pred: Predicted values\n            output_path: Path to save the plot\n            \n        Returns:\n            Path to the saved plot\n        \"\"\"\n        plt.figure(figsize=(8, 6))\n        \n        # Create scatter plot\n        plt.scatter(y_true, y_pred, alpha=0.6)\n        \n        # Add perfect prediction line\n        min_val = min(min(y_true), min(y_pred))\n        max_val = max(max(y_true), max(y_pred))\n        plt.plot([min_val, max_val], [min_val, max_val], 'r--', label='Perfect Prediction')\n        \n        plt.xlabel('Actual Values')\n        plt.ylabel('Predicted Values')\n        plt.title('Predicted vs Actual Values')\n        plt.legend()\n        plt.grid(alpha=0.3)\n        \n        plt.tight_layout()\n        plt.savefig(output_path)\n        plt.close()\n        \n        return output_path\n    \n    def _create_residuals_plot(self, y_true, y_pred, output_path):\n        \"\"\"\n        Create residuals plot for regression\n        \n        Args:\n            y_true: True values\n            y_pred: Predicted values\n            output_path: Path to save the plot\n            \n        Returns:\n            Path to the saved plot\n        \"\"\"\n        plt.figure(figsize=(8, 6))\n        \n        # Calculate residuals\n        residuals = y_true - y_pred\n        \n        # Create scatter plot\n        plt.scatter(y_pred, residuals, alpha=0.6)\n        \n        # Add horizontal line at y=0\n        plt.axhline(y=0, color='r', linestyle='--', label='Zero Residual')\n        \n        plt.xlabel('Predicted Values')\n        plt.ylabel('Residuals')\n        plt.title('Residuals vs Predicted Values')\n        plt.legend()\n        plt.grid(alpha=0.3)\n        \n        plt.tight_layout()\n        plt.savefig(output_path)\n        plt.close()\n        \n        return output_path\n    \n    def _create_residuals_distribution_plot(self, y_true, y_pred, output_path):\n        \"\"\"\n        Create residuals distribution plot for regression\n        \n        Args:\n            y_true: True values\n            y_pred: Predicted values\n            output_path: Path to save the plot\n            \n        Returns:\n            Path to the saved plot\n        \"\"\"\n        plt.figure(figsize=(8, 6))\n        \n        # Calculate residuals\n        residuals = y_true - y_pred\n        \n        # Create histogram with KDE\n        sns.histplot(residuals, kde=True)\n        \n        plt.xlabel('Residuals')\n        plt.ylabel('Frequency')\n        plt.title('Distribution of Residuals')\n        plt.grid(alpha=0.3)\n        \n        plt.tight_layout()\n        plt.savefig(output_path)\n        plt.close()\n        \n        return output_path\n    \n    def _create_feature_importance_plot(self, model, X_test, output_path='static/feature_importance.png'):\n        \"\"\"\n        Create feature importance plot\n        \n        Args:\n            model: Trained model\n            X_test: Test features\n            output_path: Path to save the plot\n            \n        Returns:\n            Path to the saved plot\n        \"\"\"\n        plt.figure(figsize=(10, 8))\n        \n        # Try to get feature importance\n        feature_importance = model.get_feature_importance()\n        \n        if feature_importance is None:\n            # Try permutation importance instead\n            try:\n                result = permutation_importance(model.model, X_test, y_test, n_repeats=10, random_state=42)\n                feature_importance = result.importances_mean\n            except:\n                logger.warning(\"Could not calculate feature importance\")\n                return None\n        \n        # If feature_importance is a dict, convert to array\n        if isinstance(feature_importance, dict):\n            features = list(feature_importance.keys())\n            importance = list(feature_importance.values())\n        else:\n            features = [f\"Feature {i}\" for i in range(len(feature_importance))]\n            importance = feature_importance\n        \n        # Sort by importance\n        sorted_idx = np.argsort(importance)\n        \n        # Plot top 20 features\n        if len(sorted_idx) > 20:\n            sorted_idx = sorted_idx[-20:]\n        \n        plt.barh([features[i] for i in sorted_idx], [importance[i] for i in sorted_idx])\n        plt.xlabel('Feature Importance')\n        plt.title('Feature Importance (Higher is More Important)')\n        plt.tight_layout()\n        plt.savefig(output_path)\n        plt.close()\n        \n        return output_path\n","size_bytes":11752},"static/css/custom.css":{"content":"/* Custom styles for the ML project */\n\n/* Card hover effect */\n.card {\n    transition: transform 0.3s ease-in-out, box-shadow 0.3s ease-in-out;\n}\n\n.card:hover {\n    transform: translateY(-5px);\n    box-shadow: 0 10px 20px rgba(0, 0, 0, 0.2);\n}\n\n/* Feature selection list */\n.feature-list {\n    max-height: 300px;\n    overflow-y: auto;\n}\n\n/* Results metrics card */\n.metric-card {\n    border-left: 4px solid var(--bs-primary);\n}\n\n/* Plot images */\n.plot-img {\n    max-width: 100%;\n    margin-bottom: 1rem;\n    border-radius: 5px;\n    box-shadow: 0 4px 10px rgba(0, 0, 0, 0.2);\n}\n\n/* Prediction result highlight */\n.prediction-result {\n    font-size: 2rem;\n    padding: 1rem;\n    background-color: rgba(var(--bs-primary-rgb), 0.1);\n    border-radius: 5px;\n    margin: 1rem 0;\n    text-align: center;\n}\n\n/* Model training spinner */\n.training-spinner {\n    display: none;\n}\n\n.training-in-progress .training-spinner {\n    display: inline-block;\n}\n\n/* Custom file upload */\n.custom-file-label {\n    overflow: hidden;\n    text-overflow: ellipsis;\n    white-space: nowrap;\n}\n\n/* Feature importance bar */\n.feature-importance-bar {\n    height: 20px;\n    background-color: var(--bs-primary);\n    margin-bottom: 5px;\n}\n\n/* Model type selection cards */\n.model-selection-card {\n    cursor: pointer;\n    border: 2px solid transparent;\n}\n\n.model-selection-card.selected {\n    border-color: var(--bs-primary);\n    background-color: rgba(var(--bs-primary-rgb), 0.1);\n}\n\n/* Page transitions */\n.page-transition {\n    animation: fadeIn 0.5s ease-in-out;\n}\n\n@keyframes fadeIn {\n    from { opacity: 0; }\n    to { opacity: 1; }\n}\n\n/* Form validation styles */\n.was-validated .form-control:invalid,\n.form-control.is-invalid {\n    border-color: var(--bs-danger);\n    padding-right: calc(1.5em + 0.75rem);\n    background-image: url(\"data:image/svg+xml,%3csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 12 12' width='12' height='12' fill='none' stroke='%23dc3545'%3e%3ccircle cx='6' cy='6' r='4.5'/%3e%3cpath stroke-linejoin='round' d='M5.8 3.6h.4L6 6.5z'/%3e%3ccircle cx='6' cy='8.2' r='.6' fill='%23dc3545' stroke='none'/%3e%3c/svg%3e\");\n    background-repeat: no-repeat;\n    background-position: right calc(0.375em + 0.1875rem) center;\n    background-size: calc(0.75em + 0.375rem) calc(0.75em + 0.375rem);\n}\n","size_bytes":2293},"static/js/main.js":{"content":"document.addEventListener('DOMContentLoaded', function() {\n    // File upload preview\n    const fileInput = document.getElementById('file-upload');\n    const fileLabel = document.querySelector('.custom-file-label');\n    \n    if (fileInput) {\n        fileInput.addEventListener('change', function() {\n            const fileName = this.files[0].name;\n            fileLabel.textContent = fileName;\n        });\n    }\n    \n    // Feature selection functionality\n    const selectAllBtn = document.getElementById('select-all-features');\n    const clearAllBtn = document.getElementById('clear-all-features');\n    const featureCheckboxes = document.querySelectorAll('.feature-checkbox');\n    \n    if (selectAllBtn) {\n        selectAllBtn.addEventListener('click', function() {\n            featureCheckboxes.forEach(checkbox => {\n                checkbox.checked = true;\n            });\n        });\n    }\n    \n    if (clearAllBtn) {\n        clearAllBtn.addEventListener('click', function() {\n            featureCheckboxes.forEach(checkbox => {\n                checkbox.checked = false;\n            });\n        });\n    }\n    \n    // Model type selection\n    const modelTypeSelect = document.getElementById('model-type');\n    const deepLearningOptions = document.getElementById('deep-learning-options');\n    const traditionalMlOptions = document.getElementById('traditional-ml-options');\n    \n    if (modelTypeSelect) {\n        modelTypeSelect.addEventListener('change', function() {\n            if (this.value === 'deep_learning') {\n                deepLearningOptions.classList.remove('d-none');\n                traditionalMlOptions.classList.add('d-none');\n            } else {\n                deepLearningOptions.classList.add('d-none');\n                traditionalMlOptions.classList.remove('d-none');\n            }\n        });\n    }\n    \n    // Form validation\n    const trainForm = document.getElementById('train-form');\n    \n    if (trainForm) {\n        trainForm.addEventListener('submit', function(event) {\n            // Check if at least one feature is selected\n            const selectedFeatures = document.querySelectorAll('.feature-checkbox:checked');\n            \n            if (selectedFeatures.length === 0) {\n                event.preventDefault();\n                alert('Please select at least one feature');\n                return false;\n            }\n            \n            // Check if target column is selected\n            const targetColumn = document.getElementById('target-column').value;\n            \n            if (!targetColumn) {\n                event.preventDefault();\n                alert('Please select a target column');\n                return false;\n            }\n            \n            // Check if model type is selected\n            const modelType = document.getElementById('model-type').value;\n            \n            if (!modelType) {\n                event.preventDefault();\n                alert('Please select a model type');\n                return false;\n            }\n            \n            return true;\n        });\n    }\n    \n    // Prediction form validation\n    const predictForm = document.getElementById('predict-form');\n    \n    if (predictForm) {\n        predictForm.addEventListener('submit', function(event) {\n            // Check if all inputs have values\n            const inputs = document.querySelectorAll('#predict-form input[type=\"number\"]');\n            let valid = true;\n            \n            inputs.forEach(input => {\n                if (input.value === '') {\n                    valid = false;\n                    input.classList.add('is-invalid');\n                } else {\n                    input.classList.remove('is-invalid');\n                }\n            });\n            \n            if (!valid) {\n                event.preventDefault();\n                alert('Please fill in all feature values');\n                return false;\n            }\n            \n            return true;\n        });\n    }\n    \n    // Initialize tooltips\n    const tooltipTriggerList = [].slice.call(document.querySelectorAll('[data-bs-toggle=\"tooltip\"]'));\n    tooltipTriggerList.map(function (tooltipTriggerEl) {\n        return new bootstrap.Tooltip(tooltipTriggerEl);\n    });\n});\n","size_bytes":4228}},"version":1}